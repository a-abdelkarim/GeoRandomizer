# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GeoRandomizer
                                 A QGIS plugin
 Generate random points or lines inside polygon layer
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-12-03
        copyright            : (C) 2023 by adcurt
        email                : a.abdelkarim9696@gmail.com
        git sha              : $Format:%H$
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
 This script initializes the plugin, making it known to QGIS.
"""


# noinspection PyPep8Naming
def classFactory(iface):  # pylint: disable=invalid-name
    """Load GeoRandomizer class from file GeoRandomizer.

    :param iface: A QGIS interface instance.
    :type iface: QgsInterface
    """
    #
    from .geo_randomizer import GeoRandomizer
    return GeoRandomizer(iface)


import subprocess

try:
    from decouple import config
except ImportError:
    try:
        subprocess.check_call(['pip', 'install', 'python-decouple'])
        from decouple import config  # Verify if the installation was successful
    except subprocess.CalledProcessError as e:
        # Handle the error, e.g., show a message to the user
        print(e)
        

try:
    import requests
except ImportError:
    try:
        subprocess.check_call(['pip', 'install', 'requests'])
        import requests  # Verify if the installation was successful
    except subprocess.CalledProcessError as e:
        # Handle the error, e.g., show a message to the user
        print(e)
        

try:
    import geojson
except ImportError:
    try:
        subprocess.check_call(['pip', 'install', 'geojson'])
        import requests  # Verify if the installation was successful
    except subprocess.CalledProcessError as e:
        # Handle the error, e.g., show a message to the user
        print(e)
        
        
try:
    import shapely
except ImportError:
    try:
        subprocess.check_call(['pip', 'install', 'shapely'])
        import requests  # Verify if the installation was successful
    except subprocess.CalledProcessError as e:
        # Handle the error, e.g., show a message to the user
        print(e)
